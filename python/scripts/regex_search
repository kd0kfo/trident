#!/usr/bin/env python

"""
Loads a sequence and does a search with the supplied sequence. Lowercase letters are substituted as wildchards and a Regular Expression search is done.
"""

from Bio import SeqIO
import re
from sys import argv,stdout
from getopt import getopt,GetoptError

def print_usage():
    print("Usage: regex_search [-r] <input file> <sequence>")
    print("Option:")
    print("-f, --forward\tOnly do forward search")
    print("-r, --revcomp\tOnly do reverse complement search")
    
def crawl_sequence(search_seq,ref_seq,is_positive):
    """
    Does a regular expression search of the reference sequence, looking for instances of search_seq.
    """
    
    fmt = "%d\t%d"
    if is_positive:
        fmt += "\t+"
    else:
        fmt += "\t-"
                
    for hit in re.finditer(search_seq,ref_seq):
        print(fmt % (hit.start(),hit.end()))
    
 # getopt
short_opts = "fhr"
long_opts = ["forward","help","revcomp"]
try:
    (opts, args) = getopt(argv[1:],short_opts,long_opts)
except GetoptError as goe:
    print(goe.msg)
    print('Run "regex_search --help" for options.')
    exit(1)

should_revcomp = True
should_forward_search = True
for (opt,optarg) in opts:
    while opt[0] == "-":
        opt = opt[1:]
    if opt in ["f","forward"]:
        should_revcomp = False
        should_forward_search = True
    elif opt in ["h","help"]:
        print_usage()
        exit(0)
    elif opt in ["r","revcomp"]:
        should_revcomp = True
        should_forward_search = False
    else:
        print("Unknown flag: %s" % opt)
        print('Run "regex_search --help" for options.')
        exit(1)
        
if len(args) != 2:
    print_usage()
    exit(1)

infile = open(args[0],"r")

search_seq = ""
for i in args[1]:
    if i.islower():
        search_seq += "."
    else:
        search_seq += i

for rec in SeqIO.parse(infile,"fasta"):
    if should_forward_search:
        crawl_sequence(search_seq,str(rec.seq),True)
    if should_revcomp:
        rec.seq = rec.seq.reverse_complement()
        crawl_sequence(search_seq,str(rec.seq),False)
