#!/usr/bin/env python
"""
Produces Energy and Score frequency plots.

Uses numpy and matplotlib.
"""

import numpy as np
import matplotlib.pyplot as plt
from getopt import getopt
from sys import argv

short_opts = "hls:t:"
long_opts = ["help","file_tag=","log","scale=","title="]

def print_usage():
    print("Usage: energy_score_plots.py [--file_tag STRING] [-l] [-s INT] [-t TITLE] <input file>")

def reduce_array(arr, sort_col, freq_col):
    unique_keys = np.unique(arr[:,sort_col])
    
    reduced_data = []
    for i in unique_keys:
        new_freq = np.sum(arr[arr[:,sort_col] == i][:,freq_col])
        reduced_data.append([i,new_freq])
    
    return np.array(reduced_data).reshape(-1,2)


# defaults
scale_factor = 1
the_title = "Frequency"
log_y_axis = False
file_tag = ""

(opts,args) = getopt(argv[1:],short_opts,long_opts)

if len(args) != 1:
    print_usage()
    exit(1)

infilename = args[0]

for (opt,optarg) in opts:
    while opt[0] == '-':
        opt = opt[1:]
    if opt == "file_tag":
         file_tag = optarg
    elif opt in ["h","help"]:
        print_usage()
        exit(0)
    elif opt in ["l","log"]:
        log_y_axis = True
    elif opt in ["s","scale"]:
        scale_factor = float(optarg)
    elif opt in ["t","title"]:
        the_title = optarg
    else:
        print("Unknown flag: %s" % opt)
        print_usage()
        exit(1)
    
data = np.genfromtxt(infilename, delimiter="\t",skiprows=1)

if scale_factor != 1:
    data[:,2] /= scale_factor
    print("Frequency column (2) was divided by %s" % scale_factor)


# Make plots
for plot_info in [("Energy (kcal)", 0,"energy{0}.png".format(file_tag),(-500.,0.)), ("Score", 1,"score{0}.png".format(file_tag),(80,400))]:
    reduced_data = reduce_array(data,plot_info[1],2)
    
    xlims = plot_info[3]
    bins = np.arange(xlims[0],xlims[1],20)
    binned = np.zeros((1,bins.shape[0]-1))
    indices = np.digitize(reduced_data[:,0],bins)
    for i in xrange(len(reduced_data)):
        index = indices[i]
        freq = reduced_data[i,1]
        binned[0,index-1] += freq
    
    plt.figure()
    plt.xlim(xlims)
    if log_y_axis:
        for i in xrange(binned.shape[1]):
            if binned[0,i] != 0:
                binned[0,i] = np.log10(binned[0,i])
    plt.bar(bins[0:binned.shape[1]],binned[0,:],width=20)
    plt.title(the_title)
    plt.xlabel(plot_info[0])
    if log_y_axis:
        plt.ylabel("Log Frequency")
    else:
        plt.ylabel("Frequency")
    plt.savefig(plot_info[2])
    
    
