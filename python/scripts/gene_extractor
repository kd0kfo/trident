#!/usr/bin/env python
from trident.gene_extractor import extract_gene

def print_usage():
    print("Usage: gene_extractor  [-b buffer] [-h header] [-s start loc] [-e end loc] [-o output] <input>")
        

def sanity_check(start_loc,end_loc,buffer,header):
    from sys import stderr
    
    if start_loc < buffer:
        stderr.write("WARNGING: Starting location (%d) is to low for buffer size. Truncating buffer on starting side by %d.\n" % (start_loc, buffer-start_loc))
    
    if header[0]:
        stderr.write("WARNING: header does not begin with a '>' character.\n")
        
    return True
    
if __name__ == "__main__":
    from sys import argv,stdout
    from getopt import getopt
    
    # defaults
    output = stdout
    start_loc = 0
    end_loc = 70
    buffer = 350000
    header = ">GENE"
    
    # getopt
    short_opts = "b:h:s:e:o:"
    long_opts = ["buffer=", "end=","header=", "output=","start="]
    (opts, args) = getopt(argv[1:],short_opts,long_opts)
        
    if len(args) != 1:
        exit(1)
    
    for (opt, optarg) in opts:
        while opt[0] == "-":
            opt = opt[1:]
        if opt in ["b","buffer"]:
            buffer = int(optarg)
        if opt in ["h","header"]:
            header = optarg
        elif opt in ["e","end"]:
            end_loc = int(optarg)
        elif opt in ["o","output"]:
            output = open(optarg,"w")
        elif opt in ["s","start"]:
            start_loc = int(optarg)
        else:
            print("Unknown flag: %s" % opt)
            exit(1)
    
    if not sanity_check(start_loc,end_loc,buffer,header):
        print("Sanity check failed. Check parameters.")
        exit(1)
        
    if start_loc >= buffer:
        start_loc -= buffer
    else:
        start_loc = 0
        
    end_loc += buffer
        
    infile = open(args[0],"r")
            
    for line in infile:
        if line.strip()[0] == ">":
            break
    output.write("%s\n" % header)
    extract_gene(infile,output,start_loc,end_loc - start_loc)
