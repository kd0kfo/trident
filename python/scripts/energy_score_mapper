#!/usr/bin/env python
"""
Parses a Trident output file and produces a tab-delimited list of Energy-Score pairs.

The energy-score pair is the first column and the second column simply contains a one.
Example:
-123.4:42.0    1
would be produced for a score line that indicated -123.4 kcal and a heuristic score of 42.

This may be used as the Map step in a Hadoop Streaming run.

Using the "--list" file, the input file can be a list of file names to be used, one name 
per line. This allows the user to specify multiple files to be mapped at once.
"""

from sys import argv,stdout
from getopt import getopt,GetoptError
from trident.parser import map_input_files
import numpy as np

HELP_WARNING = "For help, run energy_score_mapper --help"
def print_usage():
    print("Usage: energy_score_mapper [-o output] [-i input] [--list input list file]")
    print("Options:")
    print("    --hadoop\tIndicates that the process is part of a Hadoop Streaming Run. ")
    print("            \tWill use Standard Error to increment hadoop counters if necessary.")
    print("-i, --input\tSpecify input file. Default: Standard Input")
    print("-o, --output\tSpecify output file. Default: Standard Output")
    

short_opts = "hi:o:"
long_opts = ["hadoop","help","input=","list=","output="]
try:
    (opts,args) = getopt(argv[1:],short_opts,long_opts)
except GetoptError as ge:
    print(ge.msg)
    print(HELP_WARNING)
    exit(1)

infilenames = []
outfile = stdout
is_hadoop = False
for (opt,optarg) in opts:
    while opt[0] == '-':
        opt = opt[1:]
    if opt == "hadoop":
        is_hadoop = True
    elif opt in ["h","help"]:
        print_usage()
        exit(0)
    elif opt in ["i","input"]:
        infilenames.append(optarg)
    elif opt == "list":
        with open(optarg,"r") as listfile:
            for filename in listfile:
                infilenames.append(filename.strip())
    elif opt in ["o","output"]:
        outfile = open(optarg,"w")
    else:
        print("Unknown flag: %s" % opt)
        print(HELP_WARNING)
        exit(1)

def key_gen_function(hit):
    energy = np.round(float(hit['energy']),decimals=1)
    score = hit['score']
    return "{0}:{1}".format(energy,score)

hit_map = map_input_files(infilenames,key_gen_function,is_hadoop)

for key in hit_map.keys():
    outfile.write("{0}\t{1}\n".format(key,hit_map[key]))
