#!/usr/bin/env python
"""
Parses a Trident output file and produces a tab-delimited list of Energy-Score pairs.

The energy-score pair is the first column and the second column simply contains a one.
Example:
-123.4:42.0    1
would be produced for a score line that indicated -123.4 kcal and a heuristic score of 42.

This may be used as the Map step in a Hadoop Streaming run.
"""

from sys import argv,stdout,stdin
from getopt import getopt,GetoptError
import trident.parser
import numpy as np

HELP_WARNING = "For help, run energy_score_mapper --help"
def print_usage():
    print("Usage: energy_score_mapper [-o output] [-i input]")
    print("Options:")
    print("    --hadoop\tIndicates that the process is part of a Hadoop Streaming Run. ")
    print("            \tWill use Standard Error to increment hadoop counters if necessary.")
    print("-i, --input\tSpecify input file. Default: Standard Input")
    print("-o, --output\tSpecify output file. Default: Standard Output")
    

short_opts = "hi:o:"
long_opts = ["hadoop","help","input=","output="]
try:
    (opts,args) = getopt(argv[1:],short_opts,long_opts)
except GetoptError as ge:
    print(ge.msg)
    print(HELP_WARNING)
    exit(1)

infile = stdin
outfile = stdout
is_hadoop = False
for (opt,optarg) in opts:
    while opt[0] == '-':
        opt = opt[1:]
    if opt == "hadoop":
        is_hadoop = True
    elif opt in ["h","help"]:
        print_usage()
        exit(0)
    elif opt in ["i","input"]:
        infile = open(optarg,"r")
    elif opt in ["o","output"]:
        outfile = open(optarg,"w")
    else:
        print("Unknown flag: %s" % opt)
        print(HELP_WARNING)
        exit(1)
        
parser = trident.parser.Parser(infile)
for hit in parser:
    if not hit:
        if is_hadoop:
            from sys import stderr
            stderr.write("reporter:counter:TridentErrors,BrokenLines,1\n")
            continue
        else:
            from trident.parser import BrokenLine
            raise BrokenLine("Broken line while parsing score file: %s" % parser.file.name)
        
    energy = np.round(float(hit['energy']),decimals=1)
    score = hit['score']
    outfile.write("%s:%s\t1\n" % (energy,score))
