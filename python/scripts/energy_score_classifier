#!/usr/bin/env python

from sys import argv,stdin
from getopt import getopt,GetoptError
import numpy as np
from trident.parser import score_str_to_dict
from trident import TridentException

HELP_WARNING = "For help, run energy_score_classifier --help"

class OutsideClassBounds(TridentException):
    pass

def print_usage():
    print("Usage: energy_score_classifier [-c classification file] [-f function file] [-p prefix] [-i input] [--list input list file] [--permissive] [-s THRESHOLD]")
    print("Options:")
    print("-c, --classification FILE\tFile to be used to classify energy-score pairs. Tab-delimited. Column 1 contains the label. Column 2 contains the upper limit on better fraction.")
    print("-f, --function\t\t\tPython pickle file for interpolation function.")
    print("-i, --input\t\t\tInput file to be classified.")
    print("    --list\t\t\tFile containing a list of input files. One per line.")
    print("    --permissive\t\tFlag to indicate that broken lines should not cause the program to exit. Message is printed to standard error.")
    print("-p, --prefix\t\t\tFile prefix for classified output files.")
    print("-s, --score_threshold\t\tMinimum score value allowed to be retained.")
    
def error_out(msg):
    from sys import stderr
    stderr.write(msg)
    stderr.write("\n")
    stderr.write(HELP_WARNING)
    stderr.write("\n")
    exit(1)

short_opts = "c:f:hi:p:s:"
long_opts = ["classifications=","function=","help","input=","list=","permissive","prefix=","score_threshold="]

try:
    (opts,args) = getopt(argv[1:],short_opts,long_opts)
except GetoptError as ge:
    error_out("{0}\n{1}".format(ge.msg,HELP_WARNING))

def load_classifications(infile):
    """
    Takes a file and each line is a tab delimited list of names and better frequency classification values to be used.
    
    Returns a map of classification values as a float to names as strings.
    """
    retval = {}
    _file = infile
    if isinstance(infile,str):
        _file = open(infile,"r")
    for line in _file:
        line = line.strip()
        if not line:
            continue
        tokens = line.split("\t")
        if len(tokens) != 2:
            error_out("Invalid classification file. Must be 2-column, tab delimited file. First column should be the class name. Second column should be the class threshold.")
        threshold = np.log10(float(tokens[1]))
        name = tokens[0]
        if threshold in retval.keys():
            error_out("Duplicate entry in classification file: '{0}'".format(threshold))
        retval[threshold] = name
    return retval

infilenames = []
file_prefix = "output_"
classifications = None
permissive = False
Pred = None
score_threshold = 0
for (opt,optarg) in opts:
    while opt[0] == '-':
        opt = opt[1:]
    if opt in ["c","classification"]:
        classifications = load_classifications(optarg)
    elif opt in ["h","help"]:
        print_usage()
        exit(0)
    elif opt in ["f","function"]:
        import trident.classify as TC
        Pred = TC.load(optarg)
    elif opt in ["i","input"]:
        infilenames.append(optarg)
    elif opt == "list":
        with open(optarg,"r") as listfile:
            for filename in listfile:
                infilenames.append(filename.strip())
    elif opt == "permissive":
        permissive = True
    elif opt in ["p","prefix"]:
        file_prefix = optarg
    elif opt in ["s","score_threshold"]:
        score_threshold = int(optarg)
    else:
        error_out("Unknown flag: {0}\n{1}".format(opt,HELP_WARNING))
        
if not Pred or not hasattr(Pred,"interpolate"):
    error_out("Missing or Corrupted Interpolation function.")
    
if not classifications:
    error_out("Missing classification file.")
    

output_map = {}# Maps rank classifications(float) to their output file (file type)
bins = np.zeros((len(classifications),))# array of float classifications. Will be used to identify the classification file into which the hit goes using numpy.digitize
bin_idx = 0# counter
for class_val in classifications.keys():
    class_name = classifications[class_val]
    output_map[class_val] = open(file_prefix + class_name,"w")
    try:
        bins[bin_idx] = class_val
    except IndexError:
            error_out("Out of bounds.\nBins shape: {0}\noutput_map length: {1}".format(bins.shape,len(output_map)))
    bin_idx += 1
bins.sort() # need to be monotonic
num_bins = len(bins)

for infilename in infilenames:
    infile = None
    if infilename == "/dev/stdin":
        infile = stdin# platform niceness
    else:
        infile = open(infilename,"r")

    for line in infile:
        line = line.strip()
        if not line:
            continue
        hit = score_str_to_dict(line)
        if not hit:
            if permissive:
                from sys import stderr
                stderr.write("reporter:counter:TridentErrors,BrokenLines,1\n")
                stderr.write(line)
                stderr.write("\n")
                continue
            else:
                from trident.parser import BrokenLine
                raise BrokenLine("Broken line while parsing score file: {0}\n{1}".format(infilename,line))
        energy = np.round(float(hit['energy']),decimals=1)
        score = hit['score']
        if score < score_threshold:
            continue
        
        pred_rank = Pred.interpolate(hit)
        bin_index = np.digitize([pred_rank],bins)
        if np.isnan(pred_rank) or np.isinf(pred_rank):
            if permissive:
                bin_index = [-1]
            else:
                raise OutsideClassBounds("The following score is NAN: {0}".format(line))

        if bin_index[0] >= num_bins:
            if permissive:
                from sys import stderr
                stderr.write("reporter:counter:TridentErrors,OutsideClassificationBounds,1\n")
                stderr.write(line)
                stderr.write("\n")
                continue
            else:
                raise OutsideClassBounds("The following score is outside of classification boundaries\n{0}".format(line))
        classification = bins[bin_index][0]
        outfile = output_map[classification]
        outfile.write(line)
        outfile.write("\n")
        
    
