#!/usr/bin/env python
"""
Combines multiple Energy-Score frequency files, aggregating redundant pairs.
"""

from sys import stdout, argv
from getopt import getopt
import numpy as np


def print_usage():
    print("Usage: energy_score_combiner [-q] [-o FILE] [--scale INT]"
          " FILE1 FILE2 FILE3 ...")
    print("Combines multiple frequency files")
    print("Options:")
    print("-o, --output FILE\tWrites the output to the specified file.")
    print("-q, --quiet\t\tRuns without the use of the progress bar.")
    print("    --scale INT\tScale Frequencies (divide) by NUMBER.")

# defaults
output = stdout
be_quiet = False
scale = 0

short_opts = "ho:q"
long_opts = ["help", "output=", "quiet", "scale="]

(opts, args) = getopt(argv[1:], short_opts, long_opts)

if not args:
    print_usage()
    exit(1)

for (opt, optarg) in opts:
    while opt[0] == "-":
        opt = opt[1:]
    if opt in ["o", "output"]:
        output = open(optarg, "w")
    elif opt in ["h", "help"]:
        print_usage()
        exit(0)
    elif opt in ["q", "quiet"]:
        be_quiet = True
    elif opt == "scale":
        scale = int(optarg)
    else:
        print("Unknown flag: %s" % opt)
        print_usage()
        exit(1)

hit_map = {}

progress_bar = None
progress_bar_counter = 0
file_counter = 0
file_count = len(args)
for filename in args:
    file_counter += 1
    file_keys = []
    file_vals = []
    with open(filename, "r") as infile:
        for line in infile:
            line = line.strip()
            if not line:
                continue  # empty line
            (key, val) = line.split("\t")
            val = int(val)
            if scale:
                val /= scale
            file_keys.append(key)
            file_vals.append(val)
    if not file_keys and not file_vals:
        continue  # Empty file. Continue
    if not file_keys or not file_vals:
        raise Exception("Mismatch between number of keys and frequency values")
    keys = np.array(file_keys, dtype=str)
    vals = np.array(file_vals, dtype=int)
    file_keys = None  # Free up memory.
    file_vals = None  # Free up memory.

    unique_keys = np.unique(keys)

    if output != stdout and not be_quiet:
        from progressbar import ProgressBar, Percentage, Bar
        print("Parsing {0} ({1}/{2})"
              .format(filename, file_counter, file_count))
        progress_bar = ProgressBar(widgets=[Percentage(), Bar()],
                                   maxval=len(unique_keys)).start()
        progress_bar_counter = 0
    for key in unique_keys:
        total = np.sum(vals[keys == key])
        if not key in hit_map:
            hit_map[key] = total
        else:
            hit_map[key] += total
        if progress_bar:
            progress_bar_counter += 1
            progress_bar.update(progress_bar_counter)
    if progress_bar:
        print("")  # Reset LR

for hit in sorted(hit_map.iterkeys()):
    output.write("%s\t%s\n" % (hit, hit_map[hit]))
