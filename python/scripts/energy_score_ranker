#!/usr/bin/env python
"""
Takes a list of Energy-Score pair frequencies (see energy_score_mapper) and creates a tab-delimited list
of better hits.
"""

from sys import argv
from getopt import getopt
import numpy as np

def print_usage():
    print("Usage: energy_score_ranker [options] <FILE>")
    print("Usage: energy_score_ranker [options] -s ")
    print("Options:")
    print("-i, --intermediate\tPrints intermediate data in the sorting to standard output.")
    print("    --no_header\t\tOmits print the header line for the output.")
    print("-o, --output FILE\tSpecifiy the output file. Default: INPUTFILE.ordered")
    print("    --scale INT\tDivide all frequencies by the provided integer. Default: 1")
    print("-s, --search\t\tSearches the directory tree for the first file with the suffix \".score_count\"")
    

rank_format_string = "%f\t%f\t%d\t%d\t%d"
def rank2str(rank_row):
    return rank_format_string % (rank_row[0], rank_row[1], int(rank_row[2]), int(rank_row[3]), int(rank_row[4]))

def get_header():
    return "Energy\tScore\tFrequency\tBetter_Frequency\tBetter_Count\tBetter_Fraction"

def str2rank(line):
    tokens = line.split("\t")
    if len(tokens) < 2:
        print("Invalid line. Need frequency and score-energy token.")
        print("Line: %s" % line)
        exit(1)
    freq = float(tokens[1])
    tokens = tokens[0].split(":")
    if len(tokens) < 2:
        print("Invalid line. Energy and score separated by ':'")
        print("Line: %s" % line)
        exit(1)
    
    return [float(tokens[0]),float(tokens[1]),freq]

def find_file():
    from glob import glob
    files = glob("*.score_count")
    if not files:
        return None
    return files[0]

short_opts = "hio:s"
long_opts = ["help","intermediate","header","output=","scale=","search"]

(opts,args) = getopt(argv[1:],short_opts,long_opts)

should_search = False
have_header = False
show_intermediate = False
out_filename = None
scale_factor = 1
for (opt,optarg) in opts:
    while opt[0] == "-":
        opt = opt[1:]
    if opt in ["h","help"]:
        print_usage()
        exit(0)
    elif opt in ["i","intermediate"]:
        show_intermediate = True
    elif opt == "header":
        have_header = True
    elif opt in ["o","output"]:
        out_filename = optarg
    elif opt in ["s","search"]:
        should_search = True
    elif opt == "scale":
        scale_factor = int(optarg)
    else:
        print("Unknown flag: %s" % opt)
        exit(1)

infile = None    
if should_search:
    filename = find_file()
    if not filename:
        print("Could not find score_count file")
        exit(1)
    infile = open(filename,"r")
else:
    if len(args) < 1:
        print_usage()
        exit(1)
    infile = open(args[0],"r")
in_filename = file.name
if not out_filename:
    out_filename = in_filename + ".ordered"

if have_header:
    infile.readline() # skip header

ranks = []
for line in infile:
    line = line.strip()
    val = str2rank(line)
    ranks.append(val)
infile.close()

ranks = np.array(ranks)
if scale_factor != 1:
    ranks[:,2] /= scale_factor
num_ranks = len(ranks)

from progressbar import ProgressBar, Percentage, Bar
progress_length = num_ranks
progress_counter = 0
progress_bar = ProgressBar(widgets = [Percentage(), Bar()], maxval=progress_length).start()

def update_progress():
    global progress_counter
    progress_counter += 1
    try:
        progress_bar.update(progress_counter)
    except ValueError:
        pass

total_hits = 0
better_stats = np.zeros((ranks.shape[0],ranks.shape[1]+3))# Cols: Better Frequency, Better Count, Better Fraction
better_stats[:ranks.shape[0],:ranks.shape[1]] = ranks
better_col_offset = ranks.shape[1]

print("Counting ranks")
for i in xrange(num_ranks):
    total_hits += ranks[i,2]# Frequency
    curr_energy = ranks[i,0]
    curr_score = ranks[i,1]
    better_list = ranks[np.logical_and(ranks[:,0] < curr_energy, ranks[:,1] > curr_score)]
    better_stats[i,better_col_offset] += np.sum(better_list[:,2])# Total frequency of hits better than this one.
    better_stats[i,better_col_offset+1] += better_list.shape[0]# Count of hits better than this one.
    update_progress()

print("")# reset line return after progress bar

if show_intermediate:
    print(get_header())
    for i in xrange(num_ranks):
        print(rank2str(better_stats[i,:]))

outfile = open(out_filename,"w")
top_quartile = open("top_25-percent.dat","w")
for f in [outfile,top_quartile]:
    f.write(get_header())
    f.write("\n")

q = 0.25
print("Generating Output")
sort_indices = np.argsort(better_stats[:,better_col_offset+1])# Sort by better count. Will put best at "top" (i.e. smaller row index)
for i in xrange(num_ranks):
    curr_row = better_stats[sort_indices[i],:]# get row
    curr_frac = curr_row[better_col_offset]/total_hits
    outstring = "%s\t%f\n" % (rank2str(curr_row),curr_frac)
    if curr_frac < q:
        top_quartile.write(outstring)
    outfile.write(outstring)

